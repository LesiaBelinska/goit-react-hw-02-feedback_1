{"version":3,"sources":["components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","App.js","index.js"],"names":["Section","title","children","FeedbackOptions","options","onLeaveFeedback","className","map","option","type","onClick","Statistics","good","neutral","bad","total","positiveFeedbackPercentage","App","state","handleFeedback","feedback","target","dataset","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","toFixed","this","totalFeedbackCount","positiveFeedback","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAEe,SAASA,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACrC,OACI,gCACI,6BAAKD,IACJC,KCJE,SAASC,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAC/C,OACA,qBAAKC,UAAU,GAAf,SACKF,EAAQG,KAAI,SAAAC,GAAM,OACf,wBACIF,UAAU,GACVG,KAAK,SACL,gBAAeD,EACfE,QAASL,EAJb,SAMKG,GADIA,QCTN,SAASG,EAAT,GAA8E,IAAzDC,EAAwD,EAAxDA,KAAMC,EAAkD,EAAlDA,QAASC,EAAyC,EAAzCA,IAAKC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,2BAC3D,OACI,mCACKD,EAAQ,EACL,+BACI,uCAAUH,KACV,0CAAaC,KACb,sCAASC,KACT,yCAAYC,EAAZ,OACA,oDAAuBC,EAAvB,UAGJ,iD,ICRVC,E,4MACJC,MAAQ,CACNN,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPK,eAAiB,YAAiB,IACxBC,EADuB,EAAbC,OACUC,QAApBF,SACR,EAAKG,UAAS,SAACC,GACb,OAAO,eACJJ,EAAWI,EAAUJ,GAAY,O,EAKxCK,mBAAqB,WACnB,MAA+B,EAAKP,MAA5BN,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QACd,OAAOD,EADP,EAAuBE,IACHD,G,EAGtBa,gCAAkC,WAChC,IAAQd,EAAS,EAAKM,MAAdN,KACFG,EAAQ,EAAKU,qBACnB,OAAOV,IAAWH,EAAOG,EAAS,KAAKY,QAAQ,GAAK,G,4CAGtD,WACE,MAA+BC,KAAKV,MAA5BN,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjBe,EAAqBD,KAAKH,qBAC1BK,EAAmBF,KAAKF,kCAC9B,OACE,sBAAKpB,UAAU,MAAf,UACE,cAACN,EAAD,CAASC,MAAM,wBAAf,SACE,cAACE,EAAD,CACAC,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAAiBuB,KAAKT,mBAGxB,cAACnB,EAAD,CAASC,MAAM,aAAf,SACE,cAACU,EAAD,CACEC,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOc,EACPb,2BAA4Bc,a,GA7CtBC,aAsDHd,ICtDfe,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.3bfcb786.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\n\nexport default function Section({ title, children }) {\n    return (\n        <div>\n            <h2>{title}</h2>\n            {children}\n        </div>\n    );\n}\n\nSection.propTypes = {\n    title: PropTypes.string,\n    children: PropTypes.node,\n};","import PropTypes from \"prop-types\";\n\nexport default function FeedbackOptions({ options, onLeaveFeedback }) {\n    return (\n    <div className=\"\">\n        {options.map(option => (\n            <button\n                className=\"\"\n                type=\"button\"\n                data-feedback={option}\n                onClick={onLeaveFeedback}\n                key={option}>\n                {option}\n            </button>\n        ))}\n    </div>\n);\n}\n\n\nFeedbackOptions.propTypes = {\n    options: PropTypes.array.isRequired,\n    onLeaveFeedback: PropTypes.func.isRequired,\n};","import PropTypes from \"prop-types\";\n\nexport default function Statistics({good, neutral, bad, total, positiveFeedbackPercentage}) {\n    return (\n        <>\n            {total > 0 ? (\n                <ul>\n                    <li>Good:{good}</li>\n                    <li>Neutral:{neutral}</li>\n                    <li>Bad:{bad}</li>\n                    <li> Total:{total} </li>\n                    <li>Positive feedback:{positiveFeedbackPercentage}%</li>\n                </ul>\n            ) : (\n                <p>no feedback...</p>\n            )}\n        </>\n    );\n}\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positiveFeedbackPercentage: PropTypes.number.isRequired,\n};\n","import './App.css';\nimport { Component } from 'react';\nimport Section from './components/Section/Section';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Statistics from './components/Statistics/Statistics';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0\n  };\n\n  handleFeedback = ({ target }) => {\n    const { feedback } = target.dataset;\n    this.setState((prevState) => {\n      return {\n        [feedback]: prevState[feedback] + 1\n      };\n    })\n  };\n  \n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + bad + neutral;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    const total = this.countTotalFeedback();\n    return total ? +((good / total) * 100).toFixed(0) : 0;\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const totalFeedbackCount = this.countTotalFeedback();\n    const positiveFeedback = this.countPositiveFeedbackPercentage();\n    return (\n      <div className='App'>\n        <Section title='Please leave feedback'>\n          <FeedbackOptions\n          options={['good', 'neutral', 'bad']}\n          onLeaveFeedback={this.handleFeedback}\n        />\n        </Section>\n        <Section title='Statistics'>\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={totalFeedbackCount}\n            positiveFeedbackPercentage={positiveFeedback}\n          />\n        </Section>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}